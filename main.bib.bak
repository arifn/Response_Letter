% Encoding: UTF-8

@misc{istdataset,
  title = {Dataset of this study},
  howpublished = {\url{https://github.com/ovislabmonash/values-issues-dataset}},
  year = {2020},
  note = {Accessed: Dec.31, 2020}
}
@article{Huang2018,
abstract = {Developers frequently discuss aspects of the systems they are developing online. The comments they post to discussions form a rich information source about the system. Intention mining, a process introduced by Di Sorbo et al., classifies sentences in developer discussions to enable further analysis. As one example of use, intention mining has been used to help build various recommenders for software developers. The technique introduced by Di Sorbo et al. to categorize sentences is based on linguistic patterns derived from two projects. The limited number of data sources used in this earlier work introduces questions about the comprehensiveness of intention categories and whether the linguistic patterns used to identify the categories are generalizable to developer discussion recorded in other kinds of software artifacts (e.g., issue reports). To assess the comprehensiveness of the previously identified intention categories and the generalizability of the linguistic patterns for category identification, we manually created a new dataset, categorizing 5,408 sentences from issue reports of four projects in GitHub. Based on this manual effort, we refined the previous categories. We assess Di Sorbo et al.{\&}{\#}x0027;s patterns on this dataset, finding that the accuracy rate achieved is low (0.31). To address the deficiencies of Di Sorbo et al.{\&}{\#}x0027;s patterns, we propose and investigate a convolution neural network (CNN)-based approach to automatically classify sentences into different categories of intentions. Our approach optimizes CNN by integrating batch normalization to accelerate the training speed, and an automatic hyperparameter tuning approach to tune appropriate hyperparameters of CNN. Our approach achieves an accuracy of 0.84 on the new dataset, improving Di Sorbo et al.{\&}{\#}x0027;s approach by 171{\%}. We also apply our approach to improve an automated software engineering task, in which we use our proposed approach to rectify misclassified issue reports, thus reducing the bias introduced by such data to other studies. A case study on four open source projects with 2,076 issue reports shows that our approach achieves an average AUC score of 0.687, which improves other baselines by at least 16{\%}. IEEE},
author = {Huang, Qiao and Xia, Xin and Lo, David and Murphy, Gail C},
doi = {10.1109/TSE.2018.2876340},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Computer bugs,Data mining,Linguistics,Software,Taxonomy,Training,Tuning,api classification},
mendeley-groups = {Confirmation/Values in Artifacts},
mendeley-tags = {api classification},
title = {{Automating Intention Mining}},
year = {2018}
}

@InProceedings{Viviani2018,
  author          = {Viviani, Giovanni and Janik-Jones, Calahan and Famelis, Michalis and Xia, Xin and Murphy, Gail C},
  title           = {{What design topics do developers discuss?}},
  booktitle       = {Proceedings of the 26th Conference on Program Comprehension},
  year            = {2018},
  pages           = {328--331},
  publisher       = {ACM},
  abstract        = {When contributing code to a software system, developers are often confronted with the hard task of understanding and adhering to the system's design. This task is often made more difficult by the lack of explicit design information. Often, recorded design information occurs only embedded in discussions between developers. If this design information could be identified automatically and put into a form useful to developers, many development tasks could be eased, such as directing questions that arise during code review, tracking design changes that might affect desired system qualities, and helping developers understand why the code is as it is. In this paper, we take an initial step towards this goal, considering how design information appears in pull request discussions and manually categorizing 275 paragraphs from those discussions that contain design information to learn about what kinds of design topics are discussed.},
  doi             = {10.1145/3196321.3196357},
  isbn            = {9781450357142},
  keywords        = {definition-sample},
  mendeley-groups = {Confirmation/Values in Artifacts},
  mendeley-tags   = {definition-sample}
}

@InProceedings{Slavin2016,
  author          = {Slavin, Rocky and Wang, Xiaoyin and Hosseini, Mitra Bokaei and Hester, James and Krishnan, Ram and Bhatia, Jaspreet and Breaux, Travis D and Niu, Jianwei},
  booktitle       = {38th IEEE International Conference on Software Engineering},
  title           = {{Toward a framework for detecting privacy policy violations in android application code}},
  year            = {2016},
  pages           = {25--36},
  abstract        = {Mobile applications frequently access sensitive personal informa-tion to meet user or business requirements. Because such informa-tion is sensitive in general, regulators increasingly require mobile-app developers to publish privacy policies that describe what infor-mation is collected. Furthermore, regulators have fined companies when these policies are inconsistent with the actual data practices of mobile apps. To help mobile-app developers check their pri-vacy policies against their apps' code for consistency, we propose a semi-automated framework that consists of a policy terminology-API method map that links policy phrases to API methods that pro-duce sensitive information, and information flow analysis to detect misalignments. We present an implementation of our framework based on a privacy-policy-phrase ontology and a collection of map-pings from API methods to policy phrases. Our empirical eval-uation on 477 top Android apps discovered 341 potential privacy policy violations.},
  doi             = {10.1145/2884781.2884855},
  isbn            = {9781450339001},
  keywords        = {Android Applications,Privacy Policies,Violation Detection},
  mendeley-groups = {M1 - Confirmation/Values in Artifacts}
}

@InProceedings{Zhou2017,
  author    = {Zhou, Yaqin and Sharma, Asankhaya},
  title     = {Automated Identification of Security Issues from Commit Messages and Bug Reports},
  booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  year      = {2017},
  series    = {ESEC/FSE 2017},
  pages     = {914-919},
  address   = {New York, NY, USA},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/3106237.3117771},
  isbn      = {9781450351058},
  keywords  = {vulnerability identification, machine learning, commit, bug report},
  location  = {Paderborn, Germany},
  numpages  = {6}
}
@InProceedings{Alqahtani2017,
  author          = {Alqahtani, Sultan S and Rilling, Juergen},
  title           = {{An Ontology-based Approach to Automate Tagging of Software Artifacts}},
  booktitle       = {2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  year            = {2017},
  pages          = {169----174},
  abstract        = {Context: Software engineering repositories contain a wealth of textual information such as source code comments, developers' discussions, commit messages and bug reports. These free form text descriptions can contain both direct and implicit references to security concerns. Goal: Derive an approach to extract security concerns from textual information that can yield several benefits, such as bug management (e.g., prioritization), bug triage or capturing zero-day attack. Method: Propose a fully automated classification and tagging approach that can extract security tags from these texts without the need for manual training data. Results: We introduce an ontology based Software Security Tagger Framework that can automatically identify and classify cybersecurity-related entities, and concepts in text of software artifacts. Conclusion: Our preliminary results indicate that the framework can successfully extract and classify cybersecurity knowledge captured in unstructured text found in software artifacts.},
  doi             = {10.1109/ESEM.2017.25},
  file            = {:C$\backslash$:/Users/anur0003/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Alqahtani, Rilling - 2017 - An Ontology-based Approach to Automate Tagging of Software Artifacts.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781509040391},
  keywords        = {automated security concern classification,bug reports,tagging,topic modeling},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@InProceedings{Ortu2016,
  author          = {Ortu, Marco and Murgia, Alessandro and Destefanis, Giuseppe and Tourani, Parastou and Tonelli, Roberto and Marchesi, Michele and Adams, Bram},
  title           = {{The emotional side of software developers in JIRA}},
  booktitle       = {Proceedings of the 13th International Conference on Mining Software Repositories},
  year            = {2016},
  pages           = {480--483},
  abstract        = {{\textcopyright} 2016 ACM. Issue tracking systems store valuable data for testing hypotheses concerning maintenance, building statistical prediction models and (recently) investigating developer affectiveness. For the latter, issue tracking systems can be mined to explore developers emotions, sentiments and politeness |affects for short. However, research on affect detection in software artefacts is still in its early stage due to the lack of manually validated data and tools. In this paper, we contribute to the research of affects on software artefacts by providing a labeling of emotions present on issue comments. We manually labeled 2,000 issue comments and 4,000 sentences written by developers with emotions such as love, joy, surprise, anger, sadness and fear. Labeled comments and sentences are linked to software artefacts reported in our previously published dataset (containing more than 1K projects, more than 700K issue reports and more than 2 million issue comments). The enriched dataset presented in this paper allows the investigation of the role of affects in software development.},
  doi             = {10.1145/2901739.2903505},
  groups          = {Techniques in Artifacts},
  isbn            = {9781450341868},
  keywords        = {Affective Analysis,Issue Reports,Mining software repositories},
  mendeley-groups = {Confirmation/Values in Artifacts},
}

@InProceedings{Werder2018,
  author          = {Werder, Karl and Brinkkemper, Sjaak},
  title           = {{MEME – Toward a Method for EMotions Extraction from GitHub Karl}},
  booktitle       = {ACM/IEEE 3rd International Workshop on Emotion Awareness in Software Engineering},
  year            = {2018},
  pages           = {20----24},
  abstract        = {{\textcopyright} 2018 ACM. Software engineering researchers are increasingly interested in the role of emotion during software development. While general tools are available to extract emotions from textual data, these perform poorly in the domain of software engineering. Hence, this paper develops MEME - a Method for EMotion Extraction. Using GHtorrent and GitHub as data sources, the paper presents an implementation of the method. The evaluation results suggest a better performance of MEME in contrast to Syuzhet R package emotion analysis.},
  doi             = {10.2307/j.ctvct0023.22},
  groups          = {Techniques in Artifacts},
  isbn            = {9781450357517},
  mendeley-groups = {Confirmation/Values in Artifacts},
}

@InProceedings{Ding2018,
  author          = {Ding, Jin and Sun, Hailong and Wang, Xu and Liu, Xudong},
  title           = {{Entity-level sentiment analysis of issue comments}},
  booktitle       = {IEEE/ACM 3rd International Workshop on Emotion Awareness in Software Engineering},
  year            = {2018},
  volume          = {18},
  pages           = {7--13},
  publisher       = {ACM},
  abstract        = {{\textcopyright} 2018 ACM. Emotions and sentiment of software developers can largely influence the software productivity and quality. However, existing work on emotion mining and sentiment analysis is still in the early stage in software engineering in terms of accuracy, the size of datasets used and the specificity of the analysis. In this work, we are concerned with conducting entity-level sentiment analysis. We first build a manually labeled dataset containing 3,000 issue comments selected from 231,732 issue comments collected from 10 open source projects in GitHub. Then we design and develop SentiSW, an entity-level sentiment analysis tool consisting of sentiment classification and entity recognition, which can classify issue comments into {\textless}sentiment, entity{\textgreater} tuples. We evaluate the sentiment classification using ten-fold cross validation, and it achieves 68.71{\%} mean precision, 63.98{\%} mean recall and 77.19{\%} accuracy, which is significantly higher than existing tools. We evaluate the entity recognition by manually annotation and it achieves a 75.15{\%} accuracy.},
  doi             = {10.1145/3194932.3194935},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Ding et al. - 2018 - Entity-Level Sentiment Analysis of Issue Comments.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781450357517},
  mendeley-groups = {Confirmation/Values in Artifacts},
}

@InProceedings{Pletea2014,
  author          = {Pletea, Daniel and Vasilescu, Bogdan and Serebrenik, Alexander},
  title           = {{Security and emotion: sentiment analysis of security discussions on GitHub}},
  booktitle       = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  year            = {2014},
  pages           = {348--351},
  abstract        = {Application security is becoming increasingly prevalent during software and especially web application development. Consequently, countermeasures are continuously being discussed and built into applications, with the goal of reducing the risk that unauthorized code will be able to access, steal, modify, or delete sensitive data. In this paper we gauged the presence and atmosphere surrounding security-related discussions on GitHub, as mined from discussions around commits and pull requests. First, we found that security-related discussions account for approximately 10{\%} of all discussions on GitHub. Second, we found that more negative emotions are expressed in security-related discussions than in other discussions. These findings confirm the importance of properly training developers to address security concerns in their applications as well as the need to test applications thoroughly for security vulnerabilities in order to reduce frustration and improve overall project atmosphere.},
  doi             = {10.1145/2597073.2597117},
  file            = {:C$\backslash$:/Users/anur0003/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Pletea, Vasilescu, Serebrenik - 2014 - Security and Emotion Sentiment Analysis of Security Discussions on GitHub.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781450328630},
  keywords        = {GitHub,H28 [Database Management]: Database applications-d,Human Factors Keywords Security,K65 [Management of Computing and Information Syste,mining challenge,sentiment analysis},
  mendeley-groups = {Confirmation/Values in Artifacts},
}

@InProceedings{Bao2016,
  author          = {Bao, Lingfeng and Lo, David and Xia, Xin and Wang, Xinyu and Tian, Cong},
  title           = {{How android app developers manage power consumption?}},
  booktitle       = {Proceedings of the 13th International Conference on Mining Software Repositories},
  year            = {2016},
  pages           = {37--48},
  publisher       = {ACM},
  abstract        = {As Android platform becomes more and more popular, a large amount of Android applications have been developed. When developers design and implement Android applica-tions, power consumption management is an important fac-tor to consider since it affects the usability of the applica-tions. Thus, it is important to help developers adopt proper strategies to manage power consumption. Interestingly, to-day, there is a large number of Android application reposito-ries made publicly available in sites such as GitHub. These repositories can be mined to help crystalize common power management activities that developers do. These in turn can be used to help other developers to perform similar tasks to improve their own Android applications. In this paper, we present an empirical study of power man-agement commits in Android applications. Our study ex-tends that of Moura et al. who perform an empirical study on energy aware commits; however they do not focus on An-droid applications and only a few of the commits that they study come from Android applications. Android applica-tions are often different from other applications (e.g., those running on a server) due to the issue of limited battery life and the use of specialized APIs. As subjects of our empirical study, we obtain a list of open source Android applications from F-Droid and crawl their commits from Github. We get 468 power management commits after we filter the commits using a set of keywords and by performing manual anal-ysis. These 468 power management commits are from 154 different Android applications and belong to 15 different ap-plication categories. Furthermore, we use open card sort to categorize these power management commits and we obtain 6 groups which correspond to different power management activities. Our study also reveals that for different kinds of},
  doi             = {10.1145/2901739.2901748},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Bao et al. - 2016 - How Android App Developers Manage Power Consumption - An Empirical Study by Mining Power Management Commits.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781450341868},
  keywords        = {Empirical Study,Mining Software Repository,Power Consumption,Power Management},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@TechReport{Langdon2002,
  author          = {Langdon},
  title           = {{Do Artifacts Have Politics?}},
  year            = {1980},
  number          = {1},
  booktitle       = {Daedalus, Modern Technology: Problems or Opportunity},
  file            = {:D\:/Documents/Mendeley Desktop/Langdon - 2002 - Do Artifacts Have Politics.pdf:pdf},
  mendeley-groups = {IST-Reviews},
  pages           = {121--136},
  volume          = {109},
}

@Book{Kim2012,
  title           = {{A study on static analysis model of mobile application for privacy protection}},
  year            = {2012},
  author          = {Kim, Seil and Cho, Jae Ik and Myeong, Hee Won and Lee, Dong Hoon},
  isbn            = {9789400727915},
  annote          = {Checked},
  booktitle       = {Computer Science and Convergence},
  doi             = {10.1007/978-94-007-2792-2_50},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Kim et al. - Unknown - A Study on Static Analysis Model of Mobile Application for Privacy Protection.pdf:pdf},
  groups          = {Techniques in Artifacts},
  issn            = {18761100},
  keywords        = {Android,Privacy,Signature,Static analysis},
  mendeley-groups = {Confirmation/Values in Artifacts},
  pages           = {529--540}
}

@inproceedings{Gibler2012,
abstract = {As mobile devices become more widespread and powerful, they store more sensitive data, which includes not only users' personal information but also the data collected via sensors throughout the day. When mobile applications have access to this growing amount of sensitive information, they may leak it carelessly or maliciously. Google's Android operating system provides a permissions-based security model that restricts an application's access to the user's private data. Each application statically declares the sensitive data and functionality that it requires in a manifest, which is presented to the user upon installation. However, it is not clear to the user how sensitive data is used once the application is installed. To combat this problem, we present AndroidLeaks, a static analysis framework for automatically finding potential leaks of sensitive information in Android applications on a massive scale. AndroidLeaks drastically reduces the number of applications and the number of traces that a security auditor has to verify manually. We evaluate the efficacy of AndroidLeaks on 24,350 Android applications from several Android markets. AndroidLeaks found 57,299 potential privacy leaks in 7,414 Android applications, out of which we have manually verified that 2,342 applications leak private data including phone information, GPS location, WiFi data, and audio recorded with the microphone. AndroidLeaks examined these applications in 30 hours, which indicates that it is capable of scaling to the increasingly large set of available applications. {\textcopyright} 2012 Springer-Verlag.},
author = {Gibler, Clint and Crussell, Jonathan and Erickson, Jeremy and Chen, Hao},
booktitle = {International Conference on Trust and Trustworthy Computing},
doi = {10.1007/978-3-642-30921-2_17},
isbn = {9783642309205},
issn = {03029743},
mendeley-groups = {M1 - Confirmation/Values in Artifacts},
pages = {291--307},
title = {{AndroidLeaks: Automatically detecting potential privacy leaks in Android applications on a large scale}},
volume = {7344 LNCS},
year = {2012}
}

@Article{Viega2002,
  author          = {Viega, John and Bloch, J T and Kohno, Tadayoshi and McGraw, Gary},
  title           = {{Token-based scanning of source code for security problems}},
  journal         = {ACM Transactions on Information and System Security},
  year            = {2002},
  volume          = {5},
  number          = {3},
  pages           = {238--261},
  issn            = {10949224},
  abstract        = {We describe ITS4 , a tool for statically scanning C and C++ source code for security vulnerabilities. Compared to other approaches, our scanning technique stakes out a new middle ground between accuracy and efficiency. This method is efficient enough to offer real-time feedback to developers during coding while producing few false negatives. Unlike other techniques, our method is also simple enough to scan C++ code despite the complexities inherent in the language. Using ITS4 , we found new remotely exploitable vulnerabilities in a widely distributed software package as well as in a major piece of e-commerce software.We also describe functionality in more recent tools modeled after ITS4 , and discuss algorithms that could easily be used to augment these kinds of tools. Particularly, we describe a solution we have prototyped that allows for more rigorous analysis of C and C++ source code, without failing to analyze parts of the program due to preprocessor conditionals.},
  doi             = {10.1145/545186.545188},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Viega, Tech, Bloch - 2002 - Token-Based Scanning of Source Code for Security Problems.pdf:pdf},
  groups          = {Techniques in Artifacts},
  keywords        = {D25 [Software Engineering]: Testing and Debugging-,Security Additional Key Words and Phrases: Buffer,race conditions,security analysis},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@InProceedings{Fischer2017,
  author          = {Fischer, Felix and Bottinger, Konstantin and Xiao, Huang and Stransky, Christian and Acar, Yasemin and Backes, Michael and Fahl, Sascha},
  title           = {{Stack Overflow Considered Harmful? the Impact of Copy{\&}Paste on Android Application Security}},
  booktitle       = {Proceedings - IEEE Symposium on Security and Privacy},
  year            = {2017},
  pages           = {121--136},
  abstract        = {Online programming discussion platforms such as Stack Overflow serve as a rich source of information for software developers. Available information include vibrant discussions and oftentimes ready-to-use code snippets. Anecdotes report that software developers copy and paste code snippets from those information sources for convenience reasons. Such behavior results in a constant flow of community-provided code snippets into production software. To date, the impact of this behaviour on code security is unknown. We answer this highly important question by quantifying the proliferation of security-related code snippets from Stack Overflow in Android applications available on Google Play. Access to the rich source of information available on Stack Overflow including ready-to-use code snippets provides huge benefits for software developers. However, when it comes to code security there are some caveats to bear in mind: Due to the complex nature of code security, it is very difficult to provide ready-to-use and secure solutions for every problem. Hence, integrating a security-related code snippet from Stack Overflow into production software requires caution and expertise. Unsurprisingly, we observed insecure code snippets being copied into Android applications millions of users install from Google Play every day. To quantitatively evaluate the extent of this observation, we scanned Stack Overflow for code snippets and evaluated their security score using a stochastic gradient descent classifier. In order to identify code reuse in Android applications, we applied state-of-the-art static analysis. Our results are alarming: 15.4{\%} of the 1.3 million Android applications we analyzed, contained security-related code snippets from Stack Overflow. Out of these 97.9{\%} contain at least one insecure code snippet.},
  doi             = {10.1109/SP.2017.31},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Fischer et al. - 2017 - Stack Overflow Considered Harmful The Impact of Copy{\&}ampPaste on Android Application Security.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781509055326},
  issn            = {10816011},
  keywords        = {Android Application Security,Software Development,Stack Overflow},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@InProceedings{Naseri2019,
  author          = {Naseri, Mohammad and Borges, Nataniel P and Zeller, Andreas and Rouvoy, Romain},
  title           = {{AccessiLeaks: Investigating Privacy Leaks Exposed by the Android Accessibility Service}},
  booktitle       = {Proceedings on Privacy Enhancing Technologies},
  year            = {2019},
  pages           = {291--305},
  abstract        = {To support users with disabilities, Android provides the accessibility services, which implement means of navigating through an app. According to the Android developer's guide: "Accessibility services should only be used to assist users with disabilities in using Android devices and apps". However, developers are free to use this service without any restrictions, giving them critical privileges such as monitoring user input or screen content to capture sensitive information. In this paper, we show that simply enabling the accessibility service leaves 72 {\%} of the top finance and 80 {\%} of the top social media apps vulnerable to eavesdropping attacks, leaking sensitive information such as lo-gins and passwords. A combination of several tools and recommendations could mitigate the privacy risks: We introduce an analysis technique that detects most of these issues automatically, e.g. in an app store. We also found that these issues can be automatically fixed in almost all cases; our fixes have been accepted by 70 {\%} of the surveyed developers. Finally, we designed a notification mechanism which would warn users against possible misuses of the accessibility services; 50 {\%} of users would follow these notifications.},
  doi             = {10.2478/popets-2019-0031},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Naseri et al. - Unknown - AccessiLeaks Investigating Privacy Leaks Exposed by the Android Accessibility Service.pdf:pdf},
  groups          = {Techniques in Artifacts},
  keywords        = {Accessibility service,Android,privacy},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@InProceedings{Pereira2017,
  author          = {Pereira, Rui and Carcao, Tiago and Couto, Marco and Cunha, Jacome and Fernandes, Joao Paulo and Saraiva, Joao},
  title           = {{Helping programmers improve the energy efficiency of source code}},
  booktitle       = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017},
  year            = {2017},
  pages           = {238--240},
  abstract        = {{\textcopyright} 2017 IEEE. This paper briefly proposes a technique to detect energy inefficient fragments in the source code of a software system. Test cases are executed to obtain energy consumption measurements, and a statistical method, based on spectrum-basedfault localization, is introduced to relate energy consumption to the system's source code. The result of our technique is an energy ranking of source code fragments pointing developers to possible energy leaks in their code.},
  doi             = {10.1109/ICSE-C.2017.80},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Pereira et al. - 2017 - Helping Programmers Improve the Energy Efficiency of Source Code.pdf:pdf},
  groups          = {Techniques in Artifacts},
  isbn            = {9781538615898},
  keywords        = {Fault Localization,Green Computing,Program Optimization},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@InProceedings{Dabbish2012,
  author          = {Dabbish, Laura and Stuart, Colleen and Tsay, Jason and Herbsleb, Jim},
  booktitle       = {Proceedings of the ACM Conference on Computer Supported Cooperative Work, CSCW},
  title           = {{Social coding in GitHub: Transparency and collaboration in an open software repository}},
  year            = {2012},
  pages           = {1277--1286},
  abstract        = {Social applications on the web let users track and follow the activities of a large number of others regardless of location or affiliation. There is a potential for this transparency to radically improve collaboration and learning in complex knowledge-based activities. Based on a series of in-depth interviews with central and peripheral GitHub users, we examined the value of transparency for large-scale distributed collaborations and communities of practice. We find that people make a surprisingly rich set of social inferences from the networked activity information in GitHub, such as inferring someone else's technical goals and vision when they edit code, or guessing which of several similar projects has the best chance of thriving in the long term. Users combine these inferences into effective strategies for coordinating work, advancing technical skills and managing their reputation. {\textcopyright} 2012 ACM.},
  doi             = {10.1145/2145204.2145396},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Dabbish et al. - 2012 - Social coding in GitHub Transparency and collaboration in an open software repository.pdf:pdf},
  isbn            = {9781450310864},
  keywords        = {awareness,collaboration,coordination,open source software development,social computing,transparency},
  mendeley-groups = {Artefacts},
}

@InProceedings{Bissyande2013,
  author          = {Bissyande, Tegawende F. and Lo, David and Jiang, Lingxiao and Reveillere, Laurent and Klein, Jacques and Traon, Yves Le},
  booktitle       = {2013 IEEE 24th International Symposium on Software Reliability Engineering, ISSRE 2013},
  title           = {{Got issues? Who cares about it? A large scale investigation of issue trackers from GitHub}},
  year            = {2013},
  pages           = {188--197},
  abstract        = {Feedback from software users constitutes a vital part in the evolution of software projects. By filing issue reports, users help identify and fix bugs, document software code, and enhance the software via feature requests. Many studies have explored issue reports, proposed approaches to enable the submission of higher-quality reports, and presented techniques to sort, categorize and leverage issues for software engineering needs. Who, however, cares about filing issues? What kind of issues are reported in issue trackers? What kind of correlation exist between issue reporting and the success of software projects? In this study, we address the need for answering such questions by performing an empirical study on a hundred thousands of open source projects. After filtering relevant trackers, the study used about 20,000 projects. We investigate and answer various research questions on the popularity and impact of issue trackers. {\textcopyright} 2013 IEEE.},
  doi             = {10.1109/ISSRE.2013.6698918},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Bissyande et al. - 2013 - Got issues Who cares about it A large scale investigation of issue trackers from GitHub.pdf:pdf},
  isbn            = {9781479923663},
  mendeley-groups = {M2 - Progress Review,Artefacts/Issues},
}

@InProceedings{Ferrario2016,
  author          = {Ferrario, Maria Angela and Simm, Will and Forshaw, Stephen and Gradinar, Adrian and Smith, Marcia Tavares and Smith, Ian},
  title           = {{Values-first SE}},
  booktitle       = {Proceedings of the 38th International Conference on Software Engineering Companion - ICSE '16},
  year            = {2016},
  pages           = {553--562},
  abstract        = {The realization that software has a far reaching impact on politics, society and the environment is not new. However, only recently software impact has been explicitly described as `systemic' and framed around complex social problems such as sustainability. We argue that complex, wicked social problems are consequences of values choices. Such choices are guided by speci c sets of human values that have been codi ed and found in all cultures by extensive evidence- based research. The aim of this paper is to give more visibil- ity to the interrelationship between values and SE choices. To this end, we rst introduce the concept of Values-First SE and re ect on its implications to software development. Our contribution to SE is embedding the principles of values research in the SE decision making process and extracting lessons learned from practice.},
  doi             = {10.1145/2889160.2889219},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Ferrario et al. - 2016 - Values-first SE.pdf:pdf},
  isbn            = {9781450342056},
  issn            = {0146-4833},
  keywords        = {D21 [Requirements/ Specifications]: Elicitation me,D29 [Management]: Software Process Models,Design,Human Factors,K24 [Soft-ware Engineering]: Social Issues,Theory Keywords agile methods,action research,design thinking,socially conscious software,values the-ory},
  mendeley-groups = {Confirmation/Motivation}
}

@InCollection{Friedman2013,
  author          = {Friedman, Batya and Kahn, Peter H. and Borning, Alan and Huldtgren, Alina},
  title           = {{Value Sensitive Design and Information Systems}},
  booktitle       = {Early Engagement and New Technologies: Opening Up the Laboratory},
  publisher       = {Springer, Dordrecht},
  year            = {2013},
  pages           = {55--95},
  abstract        = {Value Sensitive Design is a theoretically grounded approach to the design of technology that accounts for human values in a principled and compre- hensive manner throughout the design process. It employs an integrative and iterative tripartite methodology, consisting of conceptual, empirical, and technical investi- gations. We explicate Value Sensitive Design by drawing on three case studies. The fi rst study concerns information and control of web browser cookies, implicating the value of informed consent. The second study concerns using high-defi nition plasma displays in an offi ce environment to provide a “window” to the outside world, implicating the values of physical and psychological well-being and pri- vacy in public spaces. The third study concerns an integrated land use, transporta- tion, and environmental simulation system to support public deliberation and debate on major land use and transportation decisions, implicating the values of fairness, accountability, and support for the democratic process, as well as a highly diverse range of values that might be held by different stakeholders, such as environmental sustainability, opportunities for business expansion, or walkable neighborhoods. We conclude with direct and practical suggestions for how to engage in Value Sensitive Design.},
  doi             = {10.1007/978-94-007-7844-3_4},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Friedman et al. - 2013 - Value Sensitive Design and Information Systems.pdf:pdf},
  mendeley-groups = {Confirmation/Values in Software}
}

@InProceedings{Winter2019,
  author    = {Winter, Emily and Forshaw, Stephen and Hunt, Lucy and Ferrario, Maria Angela},
  booktitle = {Proceedings - 2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering, CHASE 2019},
  title     = {{Advancing the study of human values in software engineering}},
  year      = {2019},
  pages     = {19--26},
  abstract  = {This paper makes the case for the study of human values in Software Engineering (SE) as a highly important emerging area of research with significant societal implications. We offer two key principles in order to advance this research agenda: firstly, the significance of values as distinguished from, though connected to, ethics; and secondly, the need for clear theoretical frameworks for values study. We provide the emerging findings from an initial study (N=12 participants) using a Values Q-Sort tool that was designed in accordance with these two principles. We conclude with discussion around lessons learnt, ongoing challenges, and future directions.},
  doi       = {10.1109/CHASE.2019.00012},
  file      = {:D\:/Documents/Mendeley Desktop/Winter et al. - 2019 - Advancing the Study of Human Values in Software Engineering.pdf:pdf},
  isbn      = {9781728122397},
  keywords  = {Human values,Mixed methods,Qualitative study,Software industry},
}
@article{Schwartz2012,
abstract = {This article presents an overview of the Schwartz theory of basic human values. It discusses the nature of values and spells out the features that are common to all values and what distinguishes one value from another. The theory identifies ten basic personal values that are recognized across cultures and explains where they come from. At the heart of the theory is the idea that values form a circular structure that reflects the motivations each value expresses. This circular structure, that captures the conflicts and compatibility among the ten values is apparently culturally universal. The article elucidates the psychological principles that give rise to it. Next, it presents the two major methods developed to measure the basic values, the Schwartz Value Survey and the Portrait Values Questionnaire. Findings from 82 countries, based on these and other methods, provide evidence for the validity of the theory across cultures. The findings reveal substantial differences in the value priorities of individuals. Surprisingly, however, the average value priorities of most societal groups exhibit a similar hierarchical order whose existence the article explains. The last section of the article clarifies how values differ from other concepts used to explain behavior—attitudes, beliefs, norms, and traits},
author = {Schwartz, Shalom H.},
doi = {10.9707/2307-0919.1116},
file = {:D\:/Documents/Mendeley Desktop/Schwartz - 2012 - An Overview of the Schwartz Theory of Basic Values(2).pdf:pdf},
isbn = {9780984562701},
issn = {2307-0919},
journal = {Online Readings in Psychology and Culture},
mendeley-groups = {M1 - Confirmation/Human values},
number = {1},
pages = {12--13},
title = {{An Overview of the Schwartz Theory of Basic Values}},
url = {http://scholarworks.gvsu.edu/orpc/vol2/iss1/11},
volume = {2},
year = {2012}
}
@article{Friedman2017,
abstract = {Value sensitive design is a theoretically grounded approach to the design of technology that accounts for human values in a principled and systematic manner throughout the design process. In this article we provide a survey of 14 value sensitive design methods: (1) direct and indirect stakeholder analysis; (2) value source analysis; (3) co-evolution of technology and social structure; (4) value scenario; (5) value sketch; (6) value-oriented semi- structured interview; (7) scalable information dimensions; (8) value-oriented coding manual; (9) value-oriented mockup, prototype, or field deployment; (10) ethnographically informed inquiry regarding values and technology; (11) model of informed consent online; (12) value dams and flows; (13) value sensitive action-reflection model; and (14) Envisioning Cards TM. Each of these methods is honed to the investigation of values in technology, serving such purposes as stakeholder identification and legitimation, value representation and elicitation, and values analysis. While presented individually, the methods are intended to be integrated in a robust value sensitive design process. The survey article begins with a brief summary of value sensitive design methodology and theoretical constructs. We next provide an overview of the 14 methods. Then, we turn to a broader discussion of value sensitive design practice, focussing on some methodological strategies and heuristics to support skillful value sensitive design practice. Following the broad discussion of practice, we illustrate one method in action-value scenarios-providing details on its range of purposes and contexts. We conclude with reflections on core characteristics of value sensitive design methodology, and heuristics for innovation.},
author = {Friedman, Batya and Hendry, David G. and Borning, Alan},
doi = {10.1561/1100000015},
file = {:D\:/Documents/Mendeley Desktop/A Survey of Value Sensitive Design Methods.pdf:pdf},
issn = {15513963},
journal = {Foundations and Trends in Human-Computer Interaction},
number = {23},
pages = {63--125},
title = {{A survey of value sensitive design methods}},
volume = {11},
year = {2017}
}

@InCollection{Gotterbarn2002,
  author          = {Gotterbarn, Donald},
  booktitle       = {Encyclopedia of Software Engineering},
  publisher       = {John Wiley & Sons, Inc},
  title           = {{Software Engineering Ethics}},
  year            = {2002},
  abstract        = {Software engineering ethics can be approached from three directions: (1) it can describe the activity of software engineers making practical choices that affect other people in significant ways; (2) it can be used to describe a collection of principles, guidelines, or ethical imperatives that guide or legislative action; and (3) it can be used to name a discipline that studies the relationship between the other two senses of ethics. Software engineering ethics is clearly both an activity and a body of principles. The discipline of software engineering ethics that studies this activity and formalizes these principles, however, is in its infancy. Principle of ethics, the discipline of software engineering ethics, models and professional ethics are detailed.},
  file            = {:D\:/Documents/Mendeley Desktop/Gotterbarn - 2002 - Software Engineering Ethics.pdf:pdf},
  mendeley-groups = {TSE 19 - Interview},
}

@Misc{github-issues,
  author  = {GitHub},
  title   = {About issues},
  journal = {About issues - GitHub Docs},
  url     = {https://help.github.com/en/github/managing-your-work-on-github/about-issues},
}

@InProceedings{Kalliamvakou2014,
  author          = {Kalliamvakou, Eirini and Gousios, Georgios and Blincoe, Kelly and Singer, Leif and German, Daniel M and Damian, Daniela},
  title           = {{The promises and perils of mining GitHub}},
  booktitle       = {Proceedings of the 11th Working Conference on Mining Software Repositories},
  year            = {2014},
  pages           = {92--101},
  abstract        = {Copyright 2014 ACM. With over 10 million git repositories, GitHub is becoming one of the most important source of software artifacts on the Internet. Researchers are starting to mine the information stored in GitHub's event logs, trying to understand how its users employ the site to collaborate on software. However, so far there have been no studies describing the quality and properties of the data available from GitHub. We document the results of an empirical study aimed at understanding the characteristics of the repositories in GitHub and how users take advantage of GitHub's main features-namely commits, pull requests, and issues. Our results indicate that, while GitHub is a rich source of data on software development, mining GitHub for research purposes should take various potential perils into consideration. We show, for example, that the majority of the projects are personal and inactive; that GitHub is also being used for free storage and as a Web hosting service; and that almost 40{\%} of all pull requests do not appear as merged, even though they were. We provide a set of recommendations for software engineering researchers on how to approach the data in GitHub.},
  annote          = {Provides argument to choose GitHub},
  doi             = {10.1145/2597073.2597074},
  isbn            = {9781450328630},
  keywords        = {D28 [Software Engineering]: Management-Software co,GitHub,bias ⇤ Corresponding Author,code reviews,git,github},
  mendeley-groups = {Confirmation/Values in Artifacts},
  mendeley-tags   = {github}
}

@InCollection{Friedman2003,
  author          = {Friedman, Batya and {Kahn, Jr.}, Peter H. and {Kahn Jr.}, Peter H.},
  booktitle       = {The Human-Computer Interaction Handbook},
  title           = {{Human Values, Ethics, and Design}},
  year            = {2003},
  isbn            = {0-8058-3838-4},
  pages           = {1177--1209},
  abstract        = {Note: OCR errors may be found in this Reference List extracted from the full text article. ACM has opted to expose the complete List rather than only correct and linked references.},
  file            = {:D\:/Documents/Mendeley Desktop/Friedman, Kahn, Jr., Kahn Jr. - 2003 - Human Values, Ethics, and Design.pdf:pdf},
  mendeley-groups = {IST-Reviews},
  url             = {https://faculty.washington.edu/pkahn/articles/friedman03humanvalues.pdf},
}

@Article{Kheirandish2020,
  author          = {Kheirandish, Shadi and Funk, Mathias and Wensveen, Stephan and Verkerk, Maarten and Rauterberg, Matthias},
  journal         = {Technology in Society},
  title           = {{A comprehensive value framework for design}},
  year            = {2020},
  issn            = {0160791X},
  month           = {aug},
  pages           = {101302},
  volume          = {62},
  abstract        = {The significance of human values in everyday life highlights the integral role of this concept in any design that aims to improve the quality of human life. By emphasizing the need for a comprehensive value framework for design, the present study explores a new value framework to be used as a common ground in design. For this purpose, we empirically investigate how different people group human values. By spreading the link of our Human Values Survey worldwide via the internet, a variety of participants with different cultural backgrounds were reached, and hierarchical cluster analysis was used to analyze the data. As a result, 568 complete answers were collected, from which nine value groups were concluded: “carefulness”, “justice”, “ecology”, “respect for others”, “meaningfulness”, “status”, “pleasure”, “respect for oneself” and “personal development”. After clustering our data, we propose a value framework with four themes, nine value groups, 42 key values, and 135 extra values. This framework, raising designers' awareness and widening their view of human values, provides the opportunity to address a diverse range of human values in design.},
  doi             = {10.1016/j.techsoc.2020.101302},
  file            = {:D\:/Documents/Mendeley Desktop/Kheirandish et al. - 2020 - A comprehensive value framework for design.pdf:pdf},
  keywords        = {Cluster analysis,Design studies,Empirical research,Human values,Interdisciplinarity,Value framework},
  mendeley-groups = {IST-Reviews},
  publisher       = {Elsevier Ltd},
}

@InProceedings{Mougouei2018,
  author          = {Mougouei, Davoud and Perera, Harsha and Hussain, Waqar and Shams, Rifat and Whittle, Jon},
  booktitle       = {Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
  title           = {{Operationalizing human values in software: a research roadmap}},
  year            = {2018},
  pages           = {780--784},
  abstract        = {Software influences several aspects of people's lives and therefore needs to reflect their values. However, existing software engineering methods fail to account for human values, which may result in breaching those values in software and, therefore, dissatisfaction of users and loss of profit and reputation. To avoid such negative consequences, human values need to be integrated-in a verifiable way-into software. We refer to this as Operationalizing Human Values in Software. But this is not easy to achieve due to three main obstacles: first, human values are hard to define in a way that can be put into practice; second, existing software design decisions are mainly ignorant of values; finally, values are hard to determine and quantify in software. This paper aims to establish a research roadmap for overcoming these obstacles. The proposed roadmap focuses on (i) establishing practical definitions for human values, (ii) integrating values into software design, and (iii) measuring values in the software development life cycle.},
  doi             = {10.1145/3236024.3264843},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Mougouei et al. - 2018 - Operationalizing human values in software a research roadmap.pdf:pdf},
  isbn            = {9781450355735},
  keywords        = {acm reference format,and jon,davoud mougouei,harsha perera,human values,operationalizing,rifat shams,roadmap,software engineering,waqar hussain},
  mendeley-groups = {OVIS Paper},
}

@InProceedings{Perera2019,
  author    = {Perera, Harsha and Hussain, Waqar and Whittle, Jon and Nurwidyantoro, Arif and Mougouei, Davoud and Shams, Rifat Ara and Oliver, Gillian},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
  title     = {A study on the prevalence of human values in software engineering publications, 2015--2018},
  year      = {2020},
  pages     = {409--420},
}

@InProceedings{Shams2020,
  author    = {Shams, Rifat Ara and Hussain, Waqar and Oliver, Gillian and Nurwidyantoro, Arif and Perera, Harsha and Whittle, Jon},
  booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering in Society},
  title     = {Society-Oriented Applications Development: Investigating Users' Values from {B}angladeshi Agriculture Mobile Applications},
  year      = {2020},
  address   = {New York, NY, USA},
  pages     = {53–62},
  publisher = {Association for Computing Machinery},
  series    = {ICSE-SEIS '20},
  abstract  = {Limited consideration of users' values in mobile applications (apps) can lead to user disappointments and negative socio-economic consequences. Therefore, it is important to consider values in app development to avoid such adverse effects and to secure the optimum use of apps. With this aim, we conducted a case study to identify the users' desired values that are either reflected or missing in the existing Bangladeshi agriculture mobile apps. We manually analyzed 1522 reviews from 29 existing Bangladeshi agriculture apps in Google Play by following a widely used human values theory, Schwartz's theory of basic human values. Our results show that users of the selected apps have twenty one (21) desired individual values where eleven (11) values are reflected in the apps and ten (10) values are missing. This research provides a basis for the developers to design apps that consider users' values. It also provides a direction on which values they should address while developing apps. Moreover, repeating this research in different domains or societies would result in society-oriented apps that are more sensitive to users' values.},
  doi       = {10.1145/3377815.3381382},
  isbn      = {9781450371244},
  keywords  = {society-oriented applications development, human values, mobile apps, review analysis},
  location  = {Seoul, South Korea},
  numpages  = {10}
}

@InProceedings{perera2019towards,
  author       = {Perera, Harsha and Hussain, Waqar and Mougouei, Davoud and Shams, Rifat Ara and Nurwidyantoro, Arif and Whittle, Jon},
  booktitle    = {2019 IEEE 27th International Requirements Engineering Conference (RE)},
  title        = {Towards integrating human values into software: Mapping principles and rights of gdpr to values},
  year         = {2019},
  organization = {IEEE},
  pages        = {404--409},
}

@Misc{StatCounter,
  author       = {StatCounter},
  month        = {oct},
  year         = {2020},
  lastaccessed = {November 23, 2020},
  url          = {https://gs.statcounter.com/os-market-share/mobile/worldwide},
}

@inproceedings{loorak2014papilio,
  title={Papilio: Visualizing android application permissions},
  author={Loorak, M Hosseinkhani and Fong, Philip WL and Carpendale, Sheelagh},
  booktitle={Computer Graphics Forum},
  volume={33},
  number={3},
  pages={391--400},
  year={2014},
  organization={Wiley Online Library}
}

@article{sokolova2017android,
  title={Android application classification and anomaly detection with graph-based permission patterns},
  author={Sokolova, Karina and Perez, Charles and Lemercier, Marc},
  journal={Decision Support Systems},
  volume={93},
  pages={62--76},
  year={2017},
  publisher={Elsevier}
}

@Article{Prana2018,
  author          = {Prana, Gede Artha Azriadi and Treude, Christoph and Thung, Ferdian and Atapattu, Thushari and Lo, David},
  title           = {{Categorizing the Content of GitHub README Files}},
  journal         = {Empirical Software Engineering},
  year            = {2018},
  issn            = {15737616},
  abstract        = {README files play an essential role in shaping a developer's first impression of a software repository and in documenting the software project that the repository hosts. Yet, we lack a systematic understanding of the content of a typical README file as well as tools that can process these files automatically. To close this gap, we conduct a qualitative study involving the manual annotation of 4,226 README file sections from 393 randomly sampled GitHub repositories and we design and evaluate a classifier and a set of features that can categorize these sections automatically. We find that information discussing the `What' and `How' of a repository is very common, while many README files lack information regarding the purpose and status of a repository. Our multi-label classifier which can predict eight different categories achieves an F1 score of 0.746. To evaluate the usefulness of the classification, we used the automatically determined classes to label sections in GitHub README files using badges and showed files with and without these badges to twenty software professionals. The majority of participants perceived the automated labeling of sections based on our classifier to ease information discovery. This work enables the owners of software repositories to improve the quality of their documentation and it has the potential to make it easier for the software development community to discover relevant information in GitHub README files.},
  archiveprefix   = {arXiv},
  arxivid         = {1802.06997v2},
  doi             = {10.1007/s10664-018-9660-3},
  eprint          = {1802.06997v2},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Artha et al. - 2018 - Categorizing the Content of GitHub README Files.pdf:pdf},
  keywords        = {Classification,Documentation,GitHub README files},
  mendeley-groups = {Confirmation/Values in Artifacts}
}

@inproceedings{Tomasdottir2017,
abstract = {Automatic static analysis tools help developers to automatically spot code issues in their software. They can be of extreme value in languages with dynamic characteristics, such as JavaScript, where developers can easily introduce mistakes which can go unnoticed for a long time, e.g. a simple syntactic or spelling mistake. Although research has already shown how developers perceive such tools for strongly-typed languages such as Java, little is known about their perceptions when it comes to dynamic languages. In this paper, we investigate what motivates and how developers make use of such tools in JavaScript projects. To that goal, we apply a qualitative research method to conduct and analyze a series of 15 interviews with developers responsible for the linter configuration in reputable OSS JavaScript projects that apply the most commonly used linter, ESLint. The results describe the benefits that developers obtain when using ESLint, the different ways one can configure the tool and prioritize its rules, and the existing challenges in applying linters in the real world. These results have direct implications for developers, tool makers, and researchers, such as tool improvements, and a research agenda that aims to increase our knowledge about the usefulness of such analyzers.},
author = {Tomasdottir, Kristin Fjola and Aniche, Mauricio and {Van Deursen}, Arie},
booktitle = {ASE 2017 - Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering},
doi = {10.1109/ASE.2017.8115668},
file = {:D$\backslash$:/Documents/Mendeley Desktop/T{\'{o}}masd{\'{o}}ttir, Finavaro Aniche, Van Deursen - 2017 - Why and How JavaScript Developers Use Linters.pdf:pdf},
isbn = {9781538626849},
mendeley-groups = {MSR Example},
pages = {578--589},
publisher = {APA},
title = {{Why and how JavaScript developers use linters}},
year = {2017}
}

@InCollection{Schwartz2017,
  author          = {Schwartz, Shalom H},
  title           = {{The Refined Theory of Basic Values}},
  booktitle       = {Values and Behavior: Taking a Cross Cultural Perspective},
  year            = {2017},
  pages           = {51--72},
  isbn            = {9783319563527},
  abstract        = {Three studies address unresolved issues in value-behavior relations. Does the full range of different values relate to common, recurrent behaviors? Which values relate more strongly to behavior than others? Do relations among different values and behaviors exhibit a meaningful overall structure? If so, how to explain this? We find that stimulation and tradition values relate strongly to the behaviors that express them; hedonism, power, universalism, and self-direction values relate moderately; and security, conformity, achievement, and benevolence values relate only marginally. Additional findings suggest that these differences in value-behavior relations may stem from normative pressures to perform certain behaviors. Such findings imply that values motivate behavior, but the relation between values and behaviors is partly obscured by norms. Relations among behaviors, among values, and jointly among values and behavior exhibit a similar structure. The motivational conflicts and congruities postulated by the theory of values can account for this shared structure.},
  doi             = {10.1007/978-3-319-56352-7_3},
  file            = {:media/arifn/win/Users/arif/AppData/Local/Mendeley Ltd/Mendeley Desktop/Downloaded/Schwartz - 2017 - The refined theory of basic values.pdf:pdf},
  mendeley-groups = {Confirmation/Human values}
}

@InProceedings{Cheng,
  author          = {Cheng, An Shou and Fleischmann, Kenneth R.},
  booktitle       = {Proceedings of the ASIST Annual Meeting},
  title           = {{Developing a meta-inventory of human values}},
  year            = {2010},
  volume          = {47},
  abstract        = {Human values are increasingly being used as a concept in a wide range of fields including psychology, sociology, anthropology, science and technology studies, and information science. However, the use of this concept varies widely in these different fields, and several different instruments have been developed separately to measure values. This paper reviews research to date on values in all of these fields to develop a definition of values, and then reviews 12 value inventories to create a meta-inventory.},
  doi             = {10.1002/meet.14504701232},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Cheng, Fleischmann - Unknown - Developing a Meta-Inventory of Human Values.pdf:pdf},
  isbn            = {1550-8390},
  issn            = {15508390},
  keywords        = {Human values,Meta-analysis,Value inventories},
  mendeley-groups = {Confirmation/Human values},
  pmid            = {19074419}
}

@article{barcelo2014social,
  title={Social interaction in hunter-gatherer societies: simulating the consequences of cooperation and social aggregation},
  author={Barcel{\'o}, Juan A and Bernal, Florencia Del Castillo and Olmo, Ricardo Del and Mameli, Laura and Quesada, FJ Miguel and Poza, David and Vil{\`a}, Xavier},
  journal={Social Science Computer Review},
  volume={32},
  number={3},
  pages={417--436},
  year={2014},
  publisher={Sage Publications Sage CA: Los Angeles, CA}
}

@inproceedings{mukta2017predicting,
  title={Predicting movie genre preferences from personality and values of social media users},
  author={Mukta, Md Saddam Hossain and Khan, Euna Mehnaz and Ali, Mohammed Eunus and Mahmud, Jalal},
  booktitle={Eleventh International AAAI Conference on Web and Social Media},
  year={2017}
}

@Article{Thew2018,
  author          = {Thew, Sarah and Sutcliffe, Alistair},
  title           = {{Value-based requirements engineering: method and experience}},
  journal         = {Requirements Engineering},
  year            = {2018},
  volume          = {23},
  number          = {4},
  pages           = {443--464},
  issn            = {1432010X},
  abstract        = {{\textcopyright} 2017 The Author(s) ‘Socio-political' issues, such as emotions, values and people's feelings, are often cited as problems in the RE process. A method is described for analysing such issues. The method consists of a taxonomy of stakeholders' values, motivations and emotions (VME), with process guidance for eliciting and analysing these issues for the RE process and design implications. Values are personal attitudes or long-term beliefs which may influence stakeholder functional and non-functional requirements. Motivations are psychological constructs related to personality traits which may be viewed as stakeholders' long-term goals in RE. Emotions are cues to stakeholders' reactions arising from value/motivation conflicts. The method is supported by a website which illustrates the taxonomy with explanations and scenarios describing problems arising from value conflicts, and from poor understanding of stakeholder values. Two method validation studies were undertaken: first, an evaluation of the website and method by novices and RE experts; and second, case study applications of RE value analysis in real-world industrial practice. The method was used by all practitioners, although in different ways, some used it to create an agenda of issues for analysis while others employed the VMEs to interpret stakeholders' views and manage stakeholder negotiations. The validation studies provide evidence for the acceptability of the method for industrial practitioners, illustrating how value-related problems are identified and analysed effectively by the method. The utility of analysing VMEs is compared to other ‘socio-political issues'-oriented methods in RE and methods which focus on monetized values in product requirements.},
  doi             = {10.1007/s00766-017-0273-y},
  keywords        = {Emotions,Motivations,Requirements elicitation,Values},
  mendeley-groups = {Confirmation/Values in Software},
}

@InCollection{Friedman2008,
  author          = {Friedman, Batya and {Kahn, Jr.}, Peter H. and Borning, Alan},
  title           = {{Value Sensitive Design and Information Systems}},
  booktitle       = {The Handbook of Information and Computer Ethics},
  year            = {2008},
  pages           = {69--101},
  mendeley-groups = {Confirmation/Values in Software},
}

@InCollection{maio2010mental,
  author    = {Maio, Gregory R},
  booktitle = {Advances in experimental social psychology},
  publisher = {Elsevier},
  title     = {Mental representations of social values},
  year      = {2010},
  pages     = {1--43},
  volume    = {42},
}

@inproceedings{Adolph2008,
abstract = {Grounded Theory is a research method that generates theory from data and is useful for understanding how people resolve problems that are of concern to them. Although the method looks deceptively simple in concept, implementing Grounded Theory research can often be confusing in practice. Furthermore, despite many papers in the social science disciplines and nursing describing the use of Grounded Theory, there are very few examples and relevant guides for the software engineering researcher. This paper describes our experience using classical (i.e., Glaserian) Grounded Theory in a software engineering context and attempts to interpret the canons of classical Grounded Theory in a manner that is relevant to software engineers.We providemodel to help the software engineering researchers interpret the often fuzzy definitions found in Grounded Theory texts and share our experience and lessons learned during our research. We summarize these lessons learned in a set of fifteen guidelines. {\textcopyright} Springer Science+Business Media, LLC 2011.},
author = {Adolph, Steve and Hall, Wendy and Kruchten, Philippe},
booktitle = {Proceedings of the 2008 Conference of the Center for Advanced Studies on Collaborative Research: Meeting of Minds},
doi = {10.1007/s10664-010-9152-6},
issn = {13823256},
keywords = {Empirical software engineering research,Grounded theory,Qualitative research,Theory generation},
mendeley-groups = {GT in SE},
pages = {13:166----13:178},
title = {{A Methodological Leg to Stand On: Lessons Learned Using Grounded Theory to Study Software Development}},
year = {2008}
}

@Article{Schwartz1994,
  author          = {Schwartz, Shalom H},
  journal         = {Journal of Social Issues},
  title           = {{Are There Universal Aspects in the Structure and Contents of Human Values?}},
  year            = {1994},
  issn            = {15404560},
  number          = {4},
  pages           = {19--45},
  volume          = {50},
  abstract        = {This article presents a theory of potentially universal aspects in the content of human values. Ten types of values are distinguished by their motivational goals. The theory also postulates a structure of relations among the value types, based on the conflicts and compatibilities experienced when pursuing them. This structure permits one to relate systems of value priorities, as an integrated whole, to other variables. A new values instrument, based on the theory and suitable for cross‐cultural research, is described. Evidence relevant for assessing the theory, from 97 samples in 44 countries, is summarized. Relations of this approach to Rokeach's work on values and to other theories and research on value dimensions are discussed. Application of the approach to social issues is exemplified in the domains of politics and intergroup relations. 1994 The Society for the Psychological Study of Social Issues},
  doi             = {10.1111/j.1540-4560.1994.tb01196.x},
  file            = {:D\:/Documents/Mendeley Desktop/Schwartz - 1994 - Are There Universal Aspects in the Structure and Contents of Human Values.pdf:pdf},
  isbn            = {1540-4560},
  mendeley-groups = {M1 - Confirmation/Human values},
  url             = {http://dev.crs.org.pl:4444/rid=1K6GFZBH9-255VHHF-GZ/Schwartz 1994 - Are there universal aspects in the content of human values.pdf},
}

@Article{ShalomH.Schwartz1992,
  author          = {{Shalom H. Schwartz}},
  journal         = {Advances in Experimental Social Psychology},
  title           = {{Universals in the content and structure of values: theoretical tests in 20 countries}},
  year            = {1992},
  number          = {January 1992},
  pages           = {1--65},
  volume          = {25},
  file            = {:D\:/Documents/Mendeley Desktop/Shalom H. Schwartz - 1992 - Universals in the content and structure of values theoretical tests in 20 countries.pdf:pdf},
  mendeley-groups = {M1 - Confirmation/Human values},
  url             = {https://pdfs.semanticscholar.org/dc49/e27d0ed890cd3ed2e80ca0b0107207f12a64.pdf},
}

@Article{Schwartz&Bilsky1990,
  author          = {{Schwartz, S. H., {\&} Bilsky}, W.},
  title           = {{Toward a theory of the universal content and structure of values: Extensions and Cross-Cultural Replications}},
  journal         = {Journal of personality and social psychology},
  year            = {1990},
  volume          = {58},
  number          = {5},
  pages           = {878--891},
  abstract        = {The universality of S. H. Schwartz and W. Bilsky's (see record 1988-01444-001) theory of the psychological content and structure of human values was examined with data from Australia, Finland, Hong Kong, Spain, and the United States. Smallest space analyses of the importance ratings that individuals assigned to values revealed the same 7 distinct motivational types of values in each sample as had emerged earlier in samples from Germany and Israel: achievement, enjoyment, maturity, prosocial, restrictive conformity, security, self-direction. Social power, studied only in Hong Kong, also emerged. The structural relations among the value types suggest that the motivational dynamics underlying people's value priorities are similar across the societies studied, with an exception in Hong Kong. The interests that values serve (individual vs. collective) and their goal type (instrumental vs. terminal) also distinguished values in all samples. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  file            = {:C$\backslash$:/Users/anur0003/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Schwartz, S. H., {\&} Bilsky - 1990 - Toward a theory of the universal content and structure of values Extensions and Cross-Cultural Replic.pdf:pdf},
  mendeley-groups = {Confirmation/Human values}
}

@Article{hutcheon1972value,
  author    = {Hutcheon, Pat Duffy},
  title     = {Value theory: Towards conceptual clarification},
  journal   = {The British Journal of Sociology},
  year      = {1972},
  volume    = {23},
  number    = {2},
  pages     = {172--187},
  publisher = {JSTOR},
}

@Book{rokeach1973nature,
  title     = {The nature of human values.},
  publisher = {Free press},
  year      = {1973},
  author    = {Rokeach, Milton},
}

@Book{holmes_blackmore_hawkins_wakeford_2011,
  author    = {Holmes, Tim and Blackmore, Elena and Hawkins, Richard and Wakeford, Tom},
  publisher = {Public Interest Research Center},
  title     = {The common cause handbook},
  year      = {2011},
  place     = {United Kindom},
}

@InCollection{Hanel2017,
  author          = {Hanel, Paul H.P. and Vione, Katia C. and Hahn, Ulrike and Maio, Gregory R.},
  booktitle       = {Values and Behavior: Taking a Cross Cultural Perspective},
  title           = {{Value instantiations: The missing link between values and behavior?}},
  year            = {2017},
  isbn            = {9783319563527},
  pages           = {175--190},
  abstract        = {As described in this volume, abundant research has taught us a great deal about links between values and behavior. At the same time, however, one important puzzle remains unaddressed: When people arrive at a situation and have to decide how to act, how do they decide which values should guide their actions? In this chapter, we propose a model to explain this process. The model we propose introduces value instantiations and suggests that they play a critical role in explaining the effects of values on behavior. That is, we propose that previous experiences and the context influence which behaviors are considered as prominent instantiations (examples) of a value, thereby determining which values guide action in the context. For example, the security of one's own family is considered to be important across the world (Schwartz and Bardi 2001). Most of us are eager to protect close relatives and to provide them with a good life. But what does protecting close relatives mean, which relatives are close, in which way are they close (emotionally, physically), and how exactly are close relatives to be supported and protected? The specific ways in which we imagine family security may vary across cultures. In countries such as Brazil, family security pertaining to children may have a large safety component because thousands of people are shot dead every year. In countries such as the UK, family security pertaining to children may have a large social component, because of large differences in the cost and quality of schools.},
  doi             = {10.1007/978-3-319-56352-7_8},
  file            = {:D\:/Documents/Mendeley Desktop/Hanel et al. - 2017 - Value Instantiations The Missing Link Between Values and Behavior.pdf:pdf},
  mendeley-groups = {IST-Reviews},
}

@Article{Hanel2018,
  author          = {Hanel, Paul H.P. and Maio, Gregory R. and Soares, Ana K.S. and Vione, Katia C. and Coelho, Gabriel L.de Holanda and Gouveia, Valdiney V. and Patil, Appasaheb C. and Kamble, Shanmukh V. and Manstead, Antony S.R.},
  journal         = {Frontiers in Psychology},
  title           = {{Cross-cultural differences and similarities in human value instantiation}},
  year            = {2018},
  issn            = {16641078},
  number          = {MAY},
  pages           = {1--13},
  volume          = {9},
  abstract        = {Previous research found that the within-country variability of human values (e.g., equality and helpfulness) clearly outweighs between-country variability. Across three countries (Brazil, India, and the United Kingdom), the present research tested in student samples whether between-nation differences reside more in the behaviors used to concretely instantiate (i.e., exemplify or understand) values than in their importance as abstract ideals. In Study 1 (N = 630), we found several meaningful between-country differences in the behaviors that were used to concretely instantiate values, alongside high within-country variability. In Study 2 (N = 677), we found that participants were able to match instantiations back to the values from which they were derived, even if the behavior instantiations were spontaneously produced only by participants from another country or were created by us. Together, these results support the hypothesis that people in different nations can differ in the behaviors that are seen as typical as instantiations of values, while holding similar ideas about the abstract meaning of the values and their importance.},
  doi             = {10.3389/fpsyg.2018.00849},
  file            = {:D\:/Documents/Mendeley Desktop/fpsyg-09-00849.pdf:pdf},
  keywords        = {Cross-cultural,Differences,Human values,Instantiation,Similarities,Value-behavior relations},
  mendeley-groups = {IST-Reviews},
}

@InProceedings{Glinz2007,
  author          = {Glinz, Martin},
  booktitle       = {Proceedings - 15th IEEE International Requirements Engineering Conference, RE 2007},
  title           = {{On Non-Functional Requirements}},
  year            = {2007},
  pages           = {21 ---- 26},
  abstract        = {This panel will discuss the role of quality requirements in bringing products successfully to market. Techniques for eliciting, modeling, balancing, specifying, and measuring quality requirements will be explored. {\textcopyright} 2007 IEEE.},
  doi             = {10.1109/RE.2007.45},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Glinz - 2007 - On Non-Functional Requirements.pdf:pdf},
  isbn            = {0769529356},
  mendeley-groups = {NFRs},
}

@inproceedings{Mairiza2010,
abstract = {Although Non-Functional Requirements (NFRs) are recognized as very important contributors to the success of software projects, studies to date indicate that there is still no general consensus in the software engineering community regarding the notion of NFRs. This paper presents the result of an extensive and systematic analysis of the extant literature over three NFRs dimensions: (1) definition and terminology; (2) types; and (3) relevant NFRs in various types of systems and application domains. Two different perspectives to consider NFRs are described. A comprehensive catalogue of NFRs types as well as the top five NFRs that are frequently considered are presented. This paper also offers a novel classification of NFRs based on types of systems and application domains. This classification could assist software developers in identifying which NFRs are important in a particular application domain and for specific systems. {\textcopyright} 2010 ACM.},
author = {Mairiza, Dewi and Zowghi, Didar and Nurmuliani, Nurie},
booktitle = {Proceedings of the ACM Symposium on Applied Computing},
doi = {10.1145/1774088.1774153},
file = {:D$\backslash$:/Documents/Mendeley Desktop/Mairiza, Zowghi, Nurmuliani - Unknown - An Investigation into the Notion of Non-Functional Requirements.pdf:pdf},
isbn = {9781605586380},
keywords = {application domain,classification,non-functional requirements,type of system,types},
mendeley-groups = {NFRs},
pages = {311--317},
title = {{An investigation into the notion of non-functional requirements}},
year = {2010}
}

@InProceedings{Barn2016,
  author          = {Barn, Balbir S},
  booktitle       = {Joint 6th International Working Conference on Human-Centred Software Engineering and 8th International Working Conference on Human Error, Safety, and System Development},
  title           = {{Do you own a volkswagen? Values as non-functional requirements}},
  year            = {2016},
  abstract        = {Of late, there has been renewed interest in determining the role and relative importance of (moral) values in the design of software and its acceptance. Events such as the Snowden revelations and the more recent case of the Volkswagen “defeat device” software have further emphasised the importance of values and ethics in general. This paper posits a view that values accompanied by an appropriate framework derived from non-functional requirements can be used by designers and developers as means for discourse of ethical concerns of the design of software. The position is based on the Volkswagen “Dieselgate” case study and a qualitative analysis of developers views from Reddit discussion forums. The paper proposes an extension of an existing classification of requirements to include value concerns.},
  doi             = {10.1007/978-3-319-44902-9_10},
  file            = {:D$\backslash$:/Documents/Mendeley Desktop/Barn - 2016 - Do you own a volkswagen Values as non-functional requirements.pdf:pdf},
  isbn            = {9783319449012},
  issn            = {16113349},
  mendeley-groups = {NFRs/Human Values and NFRs},
}

@article{Jha2019,
abstract = {User reviews obtained from mobile application (app) stores contain technical feedback that can be useful for app developers. Recent research has been focused on mining and categorizing such feedback into actionable software maintenance requests, such as bug reports and functional feature requests. However, little attention has been paid to extracting and synthesizing the Non-Functional Requirements (NFRs) expressed in these reviews. NFRs describe a set of high-level quality constraints that a software system should exhibit (e.g., security, performance, usability, and dependability). Meeting these requirements is a key factor for achieving user satisfaction, and ultimately, surviving in the app market. To bridge this gap, in this paper, we present a two-phase study aimed at mining NFRs from user reviews available on mobile app stores. In the first phase, we conduct a qualitative analysis using a dataset of 6,000 user reviews, sampled from a broad range of iOS app categories. Our results show that 40{\%} of the reviews in our dataset signify at least one type of NFRs. The results also show that users in different app categories tend to raise different types of NFRs. In the second phase, we devise an optimized dictionary-based multi-label classification approach to automatically capture NFRs in user reviews. Evaluating the proposed approach over a dataset of 1,100 reviews, sampled from a set of iOS and Android apps, shows that it achieves an average precision of 70{\%} (range [66{\%} - 80{\%}]) and average recall of 86{\%} (range [69{\%} - 98{\%}]).},
author = {Jha, Nishant and Mahmoud, Anas},
doi = {10.1007/s10664-019-09716-7},
issn = {15737616},
journal = {Empirical Software Engineering},
keywords = {Application store,Classification,Non-functional requirements,Requirements elicitation},
mendeley-groups = {Empirical Software Engineering,NFRs/NFR Classification},
number = {6},
pages = {3659--3695},
title = {{Mining non-functional requirements from App store reviews}},
volume = {24},
year = {2019}
}

@Comment{jabref-meta: databaseType:bibtex;}
